package homework.animals;

public abstract class Animal {

    //чтобы не было проблем с наследованием поля не делаем private
        // идентификатор по умолчанию package private (приватный внутри всего пакета)

    //как дать доступ наследникам вне пакета??
    //вводим новый идентификатор "protected" в классе родительском Animal

    protected String name;
    protected String color;
    protected int age;

    //важно!!! в наследуемых классах не использовать поля родительского класса (такие же имена переменных, у нас например name)
    //в этом случае метод который будет использовать переменную в первую очередь обратится вместо переменной родительского класса
    //к переменной своего класса в которой данных нет, только обозначение переменной без конкретного значения, поэтому выведется null
    // к методам не относится!
    // если нужно обратится к какой либо переменной используем метод super. с вызовом через точку



    //не забываем что в классе всегда есть конструктор по умолчанию в данном случае Animal() его вводить не надо

    public Animal(String name, String color, int age) {
        this.name = name;
        this.color = color;
        this.age = age;
      //  System.out.println("Animal");
    }

    //конструкторы в классах наследниках наследуются от конструктора родителя вызовом метода super()
    //это удобно позволяет создавать поля переменных только в родительском классе,  а в классах наследниках только вызывать метод



// protected дает доступ наследникам в пакете и вне пакете (всем наследникам класса)

        public void jump(){
            System.out.println(name+ " jump!");
        };

    public void sleep(){
        System.out.println(name+ " sleep...");
    };

    //прорабатывваем функции животных, добавим метод который позволяет животным говорить издавая свои звуки

  /* public void voice(){
        System.out.println(name+": издает звук");
   }*/


    //в классах-наследниках по мере изучения структуры будущей программы/ приложения мы понимаем что
    //должны быть определенные различные специальные методы, но пока что в родительском классе его нет и как его реализовать тоже не ясно.....
    //введем понятие АБСТРАКТНЫЙ метод
    //создаем абстрактный метод, нет скобочек {} для тела метода

    public abstract void voice();

    // возникла ошибка!
    // это связано с тем что если в классе имеется хотя бы 1 абстрактный метод, значит сам класс обязан быть абстрактным,
    //меняем конструкцию названия класса с "public class Animal {" на "public abstract class Animal {"
    //АБСТРАКТНЫЙ КЛАСС - это класс экземпляр которого нельзя создать (т.е. объект), при этом классы наследники могут
    // все методы и переменные работают в пержнем режиме

    //но!!! теперь мы обязаны вызвать абстрактный метод в классах наследниках, чтобы не было ошибки
    //проверяем в классе Cat

}
