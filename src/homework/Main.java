package homework;

import homework.animals.Cat;
import homework.animals.Cow;
import homework.animals.Dog;

public class Main {

    public static void main(String[] args) {
// создаем класс Cat
        //создаем класс Dog
        //они идентичны по сути, а если классов 10...50, что делаем?
        //классы имеют одинаковые методы, поля...
        // по сути они могли бы наследоваться от класса Животные
        //введем понятие Наследование
        // нужно создать класс Animal (родительский) отобразив в нем характеристики (поля и методы) всех животных


        // пока для примера создадим объект класса Cat и Dog

        Cat cat = new Cat("Barsik","red",3);
        Dog dog = new Dog("Tuzik","white",2);
        Cow cow = new Cow("Murka","grey",4 );

      //  cat.jump();
       // dog.jump();


        //в классе Cat используем наледование
        //в классе Animal убираем идентификатор private
        // теперь возникает проблема, поля классов стали публичными и позволяют внести изменения
        // создаем новый пакет package.animals
        //отправляем туда классы Animal, Cat, Dog
        //так как по умолчанию в классе Animal (родительский) идентификатор полей стоял package private (приватны внутри пакета animals)
        //соответственно для класса Main который не находится в пакете animals а в пакете  homework поля переменных стали недоступны
        //методы которые были публичны остались в доступе


        //что если нам захочется унаследоваться от класса Animal  новым классом Cow, который находится вне пакета
      // cow.sleep();

        // теперь можем перенести класс Cow в пакет animals

        //введем понятие суперкласс (родительский конструктор) в классе Animal

        //далее прорабатываем родительский класс Animal выявляем нужные на функции которые выполняют классы наследники
        // все животные разговаривают! но каждое по разному...
        // переходим в класс Animal

        //проверяем созданный метод voice из родительского класса Animal

        cat.voice();
        dog.voice();
        cow.voice();

        //выводит:
        //Barsik: издает звук
       // Tuzik: издает звук
       // Murka: издает звук

        //нужно сделать каждому животному свой голос
        //переходим в классы наследники и создаем метод точно с таким же названием
        //проверяем
        cat.voice();

        //выводит:
        //Tuzik: издает звук
        //Murka: издает звук
        //Barsik: meow!

        //мы ПЕРЕОПРЕДЕЛИЛИ метод voice!!!!
        //для классов Dog и Cow вызов метода осуществляется через родительский класс
        // чтобы в классах наследниках переопределить методы не обязательно залазить в родительский класс и смотреть наличие их
        // достаточно использовать метод @Override для вызова методов родительского класса, а затем изменить их в нашем классе как нам нужно
        // пример в классе Dog

        // еще раз проверяем
        //выводит:
       //Barsik: meow!
        //Tuzik: gav!
        //Murka: Muu!
        //Barsik: meow!

        //ПЕРЕХОДИМ В класс Animal ВВОДИМ ПОНЯТИЕ АБСТРАКЦИИ
    }
}